MEAN 
> Mongo Express Angular Node

MERN
> Mongo Express React Node
> AWS
> heroku

Basic JavaScript
NPM
Basic NodeJS(in built)(Os,file,http)
NodeJS(full Stack App) (Node-EJS-Mongo-Express)
Third Party Api (Weather Api)
Redis
Email With Node(Sendgrid)
MongoDb Basic
Api with NodeJS(Rest)
DashBoard(Crud)
Oauth(with github)
OO_NodeJs
Node-Es6(.babel)
Github
Login/Logout(JWT)
NodeJs with postgres
Testing
GraphQl API
Production 
Pm2
Docker
ChatApp
Nginx
Heroku

////////////
NPM
> Node Package Manger
> json
> JavaScript Object Notation
[
    {
        "name":"John",
        "class":"ui",
        "isActive":"true"
    },
    {
        "name":"Ammy",
        "class":"Node"
    }
]


> Package.json
# Starting point
# Description
# Meta Data
# Script
# Packages

////////////Step To Create Package.json////////
** NodeJs must be installed in system
> Navigate to the folder using cmd/terminal where you want to create
> npm init
> Answer All question
> Type "yes"

> Local Package
# Folder Specific
# max package will go local
# Normal Dependency
# Dev Dependency => use only at time of development

////////////////////////////////////
Step To Install Local Package
////////////////////////////////
> Navigate to the folder using cmd/terminal where you want to installed
> npm install packageName / npm i packageName
> npm install packageName --save -dev


> Global Package
#Run Build Test Prod

////////////////////////////////////
Step To Install Global Package
////////////////////////////////
#Win
> Run Cmd as admin
**No Need to go in any folder
> npm i -g nodemon

#Mac/Linux
> Open terminal
> sudo npm i -g nodemon

## It will not be a part of package.json
## To install we need admin access

## We need this only at time of development


Math.floor(Math.random()*(99-1))+1


///////
Continoues development
///////
npm i -g nodemon


Dev   =>  Q/A  ==> Prod
^
||

echo 'export PORT='9900'>dev.env
source ./dev.env

SQL vs NoSql


sno | Hindi | English | Computer
1      80
2                80
3                80       80

[
    {
        sno:1,
        hindi:80
    },
    {
        sno:2,
        English:80
    },
    {
        sno:2,
        English:80,
        Computer:80
    }

]


Sql       |   NoSql
Database       Database
Table          Collections
Row            Document
Relational     Non Relational
Schema         Schema Less




////////Setup////////
#Windows
>in C drrive create one folder by name data 
inside data  create one folder by name db 

Windows
C:/data/db

Mac
sudo mkdir /System/Volumes/Data/data/db

linux
sudo mkdir /data/db

Window
C:/data/db

Port 27017
How to run mongodb
> Open two terminal 
    1> Mongo server (should alawys running)
    2> Mongo console ( To test query)

Use cmd and naviagte
> C:/Program/Mongo/3.4/bin
> mongod  (mongodb server)

>Use cmd and naviagte
> C:Program/Mongo/4.2/bin
> mongod (to start server)
> mongo (to connect with console)

Mac
> Open Terminal
> sudo mongod --dbpath /System/Volumes/Data/data/db
> Open Terminal
> mongo

linux
> Open Terminal
> sudo mongod --dbpath /data/db
> Open Terminal
> mongo---------------
Install mongodb



////////
install redis
> redis-server
> redis-cli
> KEYS *
> get keyname

////////
>>>>>>>First Time<<<<<<<
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/testgit.git
git push -u origin master

Crud
Create Read Update Delete

////Create node app///
npm i -g @aakashdeveloper/create-node-app
generate

for transpile
> npm i @babel/core @babel/preset-env @babel/register


///////
Github
//////
>>>>>FirstTime<<<<<<
git init
git add .
git commit -m "first commit"
git remote add origin https://github.com/Aakashdeveloper/testgit.git
git push -u origin master

>>>>>NextTime<<<<<<
git add .
git commit -m "first commit"
git push

git checkout -b feature/weather
git push -u origin feature/weather


>>>>>>>>>>>>>>>login/Logout<<<<<<<<<<<<<<<<<<<<
npm i bcryptjs body-parser cors express jsonwebtoken mongodb mongoose

/******GetAllUser*****/
(GET)> http://localhost:5000/api/auth/users

/******Register*****/
(POST)> http://localhost:5000/api/auth/register
(body) => {"name":"Aakash", "email":"aa@gmail.com","password":"12345678","role":"user?"}


/******Login*****/
(POST) => http://localhost:5000/api/auth/login
(body)  => {"email":"aa@gmail.com","password":"12345678"}
(response)=> {auth:true,token:'dgsdg'}

/******UserInfo*****/
(GET) => http://localhost:5000/api/auth/userinfo
(Header) => {'x-access-token':'token value from login'}
(response) => {userinfo}


/////dummy api///
npm i -g json-server
json-server --watch db.json --port 8900


///////PM2/////
npm i -g pm2
pm2 start app.js

///////Docker///////
docker build . -t maynode
docker image ls 
docker run -p 8089:7899 maynode

server {
        listen       8082;
        server_name  localhost;

        location / {
	    proxy_pass http://127.0.0.1:8900;
	    proxy_http_version 1.1;
    	    proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection 'upgrade';
            proxy_set_header Host $host;
            proxy_cache_bypass $http_upgrade;
        }
    }


# HTTPS server
    #
    #server {
    #    listen       443 ssl;
    #    server_name  localhost;

    #    ssl_certificate      cert.pem;
    #    ssl_certificate_key  cert.key;

    #    ssl_session_cache    shared:SSL:1m;
    #    ssl_session_timeout  5m;

    #    ssl_ciphers  HIGH:!aNULL:!MD5;
    #    ssl_prefer_server_ciphers  on;

    #    location / {
    #        root   html;
    #        index  index.html index.htm;
    #    }
    #}
